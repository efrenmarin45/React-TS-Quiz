{"version":3,"sources":["api.ts","utils.ts","components/QuestionCardStyles.ts","components/QuestionCard.tsx","img/BGImage1.jpg","styles.ts","App.tsx","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNum","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","BGImage","spinStyle","css","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startQuiz","EASY","newQuestions","setTimeout","console","log","length","size","color","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.60ef2b5e.chunk.js","sourcesContent":["import { shuffleArr } from \"./utils\";\n\nexport type Question = {\n\tcategory: string;\n\tcorrect_answer: string;\n\tdifficulty: string;\n\tincorrect_answers: string[];\n\tquestion: string;\n\ttype: string;\n};\n\nexport type QuestionState = Question & { answers: string[] };\n\nexport enum Difficulty {\n\tEASY = \"easy\",\n\tMEDIUM = \"medium\",\n\tHARD = \"hard\",\n}\n\nexport const fetchQuizQuestions = async (\n\tamount: number,\n\tdifficulty: Difficulty\n) => {\n\tconst endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&category=15&type=multiple`;\n\tconst data = await (await fetch(endpoint)).json(); //await to fetch then await to convert to json\n\treturn data.results.map((question: Question) => ({\n\t\t...question,\n\t\tanswers: shuffleArr([\n\t\t\t...question.incorrect_answers,\n\t\t\tquestion.correct_answer,\n\t\t]),\n\t}));\n};\n","export const shuffleArr = (array: any[]) => \n    [...array].sort(() => Math.random() - 0.5)\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n\tmax-width: 1100px;\n\tbackground: #ebfeff;\n\tborder-radius: 10px;\n\tborder: 2px solid #0085a3;\n\tpadding: 20px;\n\tbox-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n\ttext-align: center;\n\n\tp {\n\t\tfont-size: 1rem;\n\t}\n`;\n\ntype ButtonWrapperProps = {\n\tcorrect: boolean;\n\tuserClicked: boolean;\n};\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n\ttransition: all 0.3s ease;\n\n\t:hover {\n\t\topacity: 0.8;\n\t}\n\n\tbutton {\n\t\tcursor: pointer;\n\t\tuser-select: none;\n\t\tfont-size: 0.8rem;\n\t\twidth: 100%;\n\t\theight: 40px;\n\t\tmargin: 5px 0;\n\t\tbackground: ${({ correct, userClicked }) =>\n\t\t\tcorrect\n\t\t\t\t? \"linear-gradient(90deg, #56ffa4, #59bc86)\"\n\t\t\t\t: !correct && userClicked\n\t\t\t\t? \"linear-gradient(90deg, #ff5656, #c16868)\"\n\t\t\t\t: \"linear-gradient(90deg, #56ccff, #6eafb4)\"};\n\t\tborder: 3px solid #fff;\n\t\tbox-shadow: 1px 2px 0px rgba(0, 0, 0, 0.25);\n\t\tborder-radius: 10px;\n\t\tcolor: #fff;\n\t\ttext-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\n\t}\n`;\n","import React from \"react\";\nimport { AnswerObject } from \"../App\";\nimport { ButtonWrapper, Wrapper } from \"./QuestionCardStyles\";\n\ntype Props = {\n\tquestion: string;\n\tanswers: string[];\n\tcallback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n\tuserAnswer: AnswerObject | undefined;\n\tquestionNum: number;\n\ttotalQuestions: number;\n};\n\nconst QuestionCard: React.FC<Props> = ({\n\tquestion,\n\tanswers,\n\tcallback,\n\tuserAnswer,\n\tquestionNum,\n\ttotalQuestions,\n}) => (\n\t<Wrapper>\n\t\t<p className=\"number\">\n\t\t\tQuestion: {questionNum} / {totalQuestions}\n\t\t</p>\n\t\t<p dangerouslySetInnerHTML={{ __html: question }} />\n\t\t<div>\n\t\t\t{answers.map((answer) => (\n\t\t\t\t<ButtonWrapper\n\t\t\t\t\tkey={answer}\n\t\t\t\t\tcorrect={userAnswer?.correctAnswer === answer}\n\t\t\t\t\tuserClicked={userAnswer?.answer === answer}\n\t\t\t\t>\n\t\t\t\t\t<button\n\t\t\t\t\t\tdisabled={userAnswer ? true : false}\n\t\t\t\t\t\tvalue={answer}\n\t\t\t\t\t\tonClick={callback}\n\t\t\t\t\t>\n\t\t\t\t\t\t<span dangerouslySetInnerHTML={{ __html: answer }} />\n\t\t\t\t\t</button>\n\t\t\t\t</ButtonWrapper>\n\t\t\t))}\n\t\t</div>\n\t</Wrapper>\n);\n\nexport default QuestionCard;\n","export default __webpack_public_path__ + \"static/media/BGImage1.8f782414.jpg\";","import styled, { createGlobalStyle } from \"styled-components\";\nimport BGImage from \"./img/BGImage1.jpg\";\n\nexport const GlobalStyle = createGlobalStyle`\n    html{\n        height: 100%;\n    }\n\n    body{\n        background-image: url(${BGImage});\n        background-size: cover;\n        margin: 0;\n        padding: 0 20px;\n        display: flex;\n        justify-content: center;\n    }\n\n    * {\n        box-sizing: border-box;\n        font-family: 'Catamaran', sans-serif;\n    }\n`;\n\nexport const Wrapper = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\n\t> p {\n\t\tcolor: #fff;\n\t}\n\n\t.score {\n\t\tcolor: black;\n\t\tfont-size: 2rem;\n\t\tmargin: 0;\n\t\tbackground-color: #ebfeff;\n\t\tmargin-bottom: 20px;\n\t\tborder-radius: 10px;\n\t\tborder: 2px solid #0085a3;\n\t\tpadding: 5px 25px;\n        filter: drop-shadow(4px 2px #3ba0f2);\n\t}\n\n\th1 {\n\t\tfont-family: \"Staatliches\", sans serif;\n\t\tbackground-color: #fff;\n\t\tborder-radius: 20px;\n\t\tbackground-size: 100%;\n\t\tpadding: 5px 25px;\n\t\tfilter: drop-shadow(4px 2px #3ba0f2);\n\t\tfont-size: 70px;\n\t\ttext-align: center;\n\t\tmargin: 20px;\n\t}\n\n\t.start,\n\t.next {\n\t\tcursor: pointer;\n\t\tborder: 2px solid #fff;\n\t\tbox-shadow: 0px 5px 10px rgba(0, 0, 0, 0.35);\n\t\tborder-radius: 10px;\n\t\theight: 40px;\n\t\tmargin: 20px 0;\n\t\tpadding: 0 40px;\n\t\tbackground-color: #00c0f6;\n\t\tcolor: #fff;\n\t\ttext-shadow: 1px 1px #003443;\n\t}\n\n\t.start {\n\t\tmax-width: 200px;\n\t\tfont-size: 1.3rem;\n\t}\n\n\t.loadingText {\n\t\tfont-family: \"Press Start 2p\";\n\t\tfont-size: 2rem;\n\t\tmargin-top: 50px;\n\t\ttext-shadow: 2px 2px black;\n\t}\n`;\n","import React, { useState } from \"react\";\nimport { PacmanLoader } from \"react-spinners\";\nimport { css } from \"@emotion/react\";\nimport { Difficulty, fetchQuizQuestions, QuestionState } from \"./api\";\nimport QuestionCard from \"./components/QuestionCard\";\nimport { GlobalStyle, Wrapper } from \"./styles\";\n\nconst TOTAL_QUESTIONS = 20;\n\nexport type AnswerObject = {\n\tquestion: string;\n\tanswer: string;\n\tcorrect: boolean;\n\tcorrectAnswer: string;\n};\n\nconst spinStyle = css`\n\tdisplay: block;\n  margin-top: 100px;\n  margin-right: 80px;\n`;\n\nconst App = () => {\n\tconst [loading, setLoading] = useState(false);\n\tconst [questions, setQuestions] = useState<QuestionState[]>([]);\n\tconst [number, setNumber] = useState(0);\n\tconst [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n\tconst [score, setScore] = useState(0);\n\tconst [gameOver, setGameOver] = useState(true);\n\n\tconst startQuiz = async () => {\n\t\tsetLoading(true);\n\t\tsetGameOver(false);\n\n\t\ttry {\n\t\t\tconst newQuestions = await fetchQuizQuestions(\n\t\t\t\tTOTAL_QUESTIONS,\n\t\t\t\tDifficulty.EASY\n\t\t\t);\n\n\t\t\tsetQuestions(newQuestions);\n\t\t\tsetScore(0);\n\t\t\tsetUserAnswers([]);\n\t\t\tsetNumber(0);\n\t\t\tsetTimeout(() => setLoading(false), 4000);\n\t\t} catch (err) {\n\t\t\tconsole.log(\"Oops, looks like I caught an error: \", err);\n\t\t}\n\t};\n\n\tconst checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n\t\tif (!gameOver) {\n\t\t\t//User Answer\n\t\t\tconst answer = e.currentTarget.value;\n\n\t\t\t//Check answer against correct answer\n\t\t\tconst correct = questions[number].correct_answer === answer;\n\n\t\t\t//Add Score if answer was correct\n\t\t\tif (correct) setScore((prev) => prev + 1);\n\n\t\t\t//Save answer in the array for user answers\n\t\t\tconst answerObject = {\n\t\t\t\tquestion: questions[number].question,\n\t\t\t\tanswer: answer,\n\t\t\t\tcorrect: correct,\n\t\t\t\tcorrectAnswer: questions[number].correct_answer,\n\t\t\t};\n\t\t\tsetUserAnswers((prev) => [...prev, answerObject]);\n\t\t}\n\t};\n\n\tconst nextQuestion = () => {\n    const nextQuestion = number + 1;\n    if(nextQuestion === TOTAL_QUESTIONS){\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  };\n\n\treturn (\n    <>\n    <GlobalStyle />\n\t\t<Wrapper>\n\t\t\t<h1>Video Game Quiz</h1>\n\t\t\t{gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n\t\t\t\t<button className=\"start\" onClick={startQuiz}>\n\t\t\t\t\tStart\n\t\t\t\t</button>\n\t\t\t) : null}\n\t\t\t{!gameOver ? <p className=\"score\">Score: {score}</p> : null}\n\t\t\t{loading && <PacmanLoader css={spinStyle} size={35} color=\"#35E6DB\" loading />}\n      {loading && <p className=\"loadingText\">Loading</p>}\n\t\t\t{!loading && !gameOver && (\n\t\t\t\t<QuestionCard\n\t\t\t\t\tquestionNum={number + 1}\n\t\t\t\t\ttotalQuestions={TOTAL_QUESTIONS}\n\t\t\t\t\tquestion={questions[number].question}\n\t\t\t\t\tanswers={questions[number].answers}\n\t\t\t\t\tuserAnswer={userAnswers ? userAnswers[number] : undefined}\n\t\t\t\t\tcallback={checkAnswer}\n\t\t\t\t/>\n\t\t\t)}\n\t\t\t{!gameOver &&\n\t\t\t!loading &&\n\t\t\tuserAnswers.length === number + 1 &&\n\t\t\tnumber !== TOTAL_QUESTIONS - 1 ? (\n\t\t\t\t<button className=\"next\" onClick={nextQuestion}>\n\t\t\t\t\tNext Question\n\t\t\t\t</button>\n\t\t\t) : null}\n\t\t</Wrapper>\n    </>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}